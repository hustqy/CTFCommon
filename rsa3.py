# -*- encoding:utf-8 -*-  
import math,random#导入模块  
import fractions
  
def rsa_key():#生成密钥的函数  
    n1 = 506015868087925469280323440698323820366847531412014454453109261752195450997461453248109561901777820659362436000168575066006482998042106662468013029390677689108469454792577671710329063869754797286272178808039609629578341396862675511881664109728529072439749243055146386345771690066017610680334642644820357367113560746206341472370816078153490310461587409847175227086860247618871248800331205869749417322402661039249099574451634409149693176950333135953209957618577902737885293832935382947928367623293693371224629999871305673508101465707366762481529769802037975256481236334943690004090534386310269656149315728251067935630874713489387703945720092840149659217270964431809296523986344580107358793102614182103171891232168570557846685400736856672165283380708566589887633511800582060830919253962682260575894376478544195784774294005701618559884446733539267433682925375885667527613386272406289928538453653987566660122257904122409095873839790451806070715675661362473415175666897905792904238854028329236309361854312022371212316944676093224485138558122915089302771844960484528653604865417585309647087469165917264306720783573363730331056390336632158917940161524482474222308391782458426722409662602007082518757904483913554224890747620636165393603564169L
    n2 = 815674855762513558499364549063862998597448378390371120731793179556788621672020240698279642109052406293371228085353990456615631217691194982820965551614050237843731314861370343932508177954756898114922728495841913704435427634641819974131138978342225252024398632908842355093974315109464667148151319926736571651089440216468001446117964883814967530090772331610872214587088775925320329805773648115370822199251285797274558474191892178498288945630834802403670174914301968128314848003593593190445497695147401953140755764844808796523813640165161944450591118775228647839087955536945828097541168793677574716378048532012186486174625980498066476069679494618335111097221292148533225804807897507044468088700955520024822865597748880954005620180990285085390724354219878688590597330894466684412687837186896849884092676081688834149328120310522954489656645336082557887357102018921953957135901417149210500630704350081995505276488805997038526440217496003114750374007134612159106235320933259891737534040929338503776985229497538229563321407849215584933589093692069472843560741445095591211580731460271114451968717717196310758852436243908164463744025320421792328446875849203056741936360809758838084369717816185295154296302237288062505877986319210957464136293301L
    n3 = 451589405443885639532664883859216363970102495238454005583502814948709861054604589492087214391026161718840712705184465352892872279483226045003675328137200180347066945649063357460545095124401174412402412591894019730413659084129498731745492405280113670061074844982706223166650624594410544703655210989170362799832948402131589893683097052534188232018831460648833922491845242999104729051856047554461592141923609067721677288509785659689424141982208823064927672325326620784429542691848269900476174512849712080731463165888941126715801897450390947405360358788234319745572097399944029646258631974120361805577182530715322294753776294377061711040483276155053200152905894695956147319323691259612211916411774477705470961706150526418754363013979262939468472636238812312277753651726581175400875398282953989527732669793304285817646621182027723371190456148963637353156630218046517828448369169973818039799839417080252054958033196228990542396036470927572921035311359005178429700940826992949774542462363798527740081353008519753185975501597280605049108216635994252754541155459474608806796328071204327663043687013257427236938746340359063814135062840603784520876035191022269695865860422203948637604849542033510971137223007424016882595334067001751810442466721L

    c1 = 422202655043697441008056634699506440980561387033088322732995049879932323051927190250724892940260646596004119586989253485130784100462833767995013416594354628991557329834579678503446222309175836339417485985968610435157170979846337308935285629514056548101931600424080261149058385019333106828096780784152769723319430638077397784488188300269759853018068593125503920515396498346791782183613630827525865742817824737524778600779046198134118423971041873239283917219492281716514287781062283556844348439484696727791418091909003179278270833739444185033189007173272982002647843234463775765473822974826249412005481788392267738555056207235558516849896274881215003898050228465597167452541333334227702966958855468294410552285198993000696685754776388552150938300571356119793035456483589947220686450569518300762038085647541516338643788494209945506572639500800169181465525502032014074118491254033882494182006358527558325723060328148367597635907837519826377491858161642016597318892643513658797656461181754345410578293972421227638777120586578472160194538026580226217208782677750802644184897777316159962372601127683511681574910856873943543507948698653405002932725659111293872165078423821839459636122366159029115941888156437101293322841314286470671222129533L
    c2 = 291199017091423018444883129769432677323736856342078208682392725930239075233963348031347645440117079905453327603878916132790610522213359424939643307569676753150419151647937563916555085941587237845906416999340937123430192229103333952105383557993027875321697061557728331220252748155175783236563484249719182002331797583545653217489959830163888370363582649301670475658895068338004908965555115081697001419475161563720873419081658604503673822772439101072370241987352544463098568196489915551652334366740436088174399880730316531535663377150811915024512529222672015370562757468671768766176998171748132603280903819038748399655160718526713128608897925173682345817125727276496706961041303680467411574489566059872417338554294443440721764112592713654699747023041769056712075509654176385185289731592250292631755662196811451964242767692188556659722032387412963069146832611695043170210433844505118477996793778073699228116983095064983987247915804468632217793791520925381853987383855778033148418097744721161079294144334407164987927059363081174915025459973359685661316270988041984831496780708462493610708677753422862616457024181157420446240285156329627847905232035597296122352099909800581240569048291237744517551863812530192491469831150992988085655407063L
    c3 = 244991626580272608430571011528356840083813036263690394581275717117070042401766711649232658261816719905857039715928344747663202719704968306185636991100173743400853813010869398398878106709753063406908221271846242387218878795620578889150399916681607528196298425522643972461902171454529178208779793497254281219458365182805697389841992366860460727935842501053217939814499840198169201553995884357896960102289429446051168832266580324087429404184064302142769899403919917377344885526875653208470633867950391527764074950981703558206928488690537380472314267906860666288465948744951497260857646290341338567152078913403574710440524393909123218109123272154027937301190428547701911130824799519342003604836652786784204125311945831082653556904891802231344752960774912004036204631216048786376547778889730100189568595187788899697815980411635912733976500410649869033213128685522992990848717001688330096263706053147396602854150719105431575615659219546462954291479574994873083500792561356266801864902748674021216746070329594049486486215250030589744698415844112686146961473610094403848232133387408926763798186079547777955355354023816851511814416388186848116345820106286434899468118400974631076494849056601464003251853828227828707398987457569162141827944209L
    
    p =  fractions.gcd(n1,n2)
    
    q1 = n1/p
    q2 = n2/p
    q3 = n3/p

    e = 65537

    d1 = modinv(e, (q1-1)*(p-1))
    d2 = modinv(e, (q2-1)*(p-1))
    d3 = modinv(e, (q3-1)*(p-1))
    m1 = pow(c1, d1, n1)
    m2 = pow(c2, d2, n2)
    m3 = pow(c3, d3, n3)
    #print str(m1)+str(m2)+str(m3)
    print m1
    print m2
    print m3




def egcd(a, b):
    if a == 0:
      return (b, 0, 1)
    else:
      g, y, x = egcd(b % a, a)
      return (g, x - (b // a) * y, y)
def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
      raise Exception('modular inverse does not exist')
    else:
      return x % m

if __name__=="__main__":
    rsa_key()